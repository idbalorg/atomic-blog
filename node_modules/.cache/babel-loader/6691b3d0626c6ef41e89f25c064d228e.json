{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\IDRIS\\\\Desktop\\\\my react\\\\atomic-blog\\\\src\\\\PostContext.js\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport { createContext, useContext, useState } from 'react';\nimport { faker } from \"@faker-js/faker\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction createRandomPost() {\n  return {\n    title: `${faker.hacker.adjective()} ${faker.hacker.noun()}`,\n    body: faker.hacker.phrase()\n  };\n}\n\nconst PostContext = /*#__PURE__*/createContext();\n\nfunction PostProvider(_ref) {\n  _s();\n\n  let {\n    children\n  } = _ref;\n  const [posts, setPosts] = useState(() => Array.from({\n    length: 30\n  }, () => createRandomPost()));\n  const [searchQuery, setSearchQuery] = useState(\"\"); // Derived state. These are the posts that will actually be displayed\n\n  const searchedPosts = searchQuery.length > 0 ? posts.filter(post => `${post.title} ${post.body}`.toLowerCase().includes(searchQuery.toLowerCase())) : posts;\n\n  function handleAddPost(post) {\n    setPosts(posts => [post, ...posts]);\n  }\n\n  function handleClearPosts() {\n    setPosts([]);\n  }\n\n  return /*#__PURE__*/_jsxDEV(PostContext.Provider, {\n    value: {\n      posts: searchedPosts,\n      onClearPosts: handleClearPosts,\n      searchQuery: searchQuery,\n      setSearchQuery,\n      onAddPost: handleAddPost\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 39,\n    columnNumber: 5\n  }, this);\n}\n\n_s(PostProvider, \"IIgvfwXtAm3eXUr7HRsVYhSvhoQ=\");\n\n_c = PostProvider;\n\nfunction usePost() {\n  _s2();\n\n  const context = useContext(PostContext);\n  return context;\n}\n\n_s2(usePost, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\n\nexport { PostProvider, usePost };\n\nvar _c;\n\n$RefreshReg$(_c, \"PostProvider\");","map":{"version":3,"names":["createContext","useContext","useState","faker","createRandomPost","title","hacker","adjective","noun","body","phrase","PostContext","PostProvider","children","posts","setPosts","Array","from","length","searchQuery","setSearchQuery","searchedPosts","filter","post","toLowerCase","includes","handleAddPost","handleClearPosts","onClearPosts","onAddPost","usePost","context"],"sources":["C:/Users/IDRIS/Desktop/my react/atomic-blog/src/PostContext.js"],"sourcesContent":["\r\nimport { createContext, useContext, useState } from 'react';\r\nimport { faker } from \"@faker-js/faker\";\r\n\r\n\r\nfunction createRandomPost() {\r\n  return {\r\n    title: `${faker.hacker.adjective()} ${faker.hacker.noun()}`,\r\n    body: faker.hacker.phrase(),\r\n  };\r\n}\r\nconst PostContext = createContext()\r\n\r\nfunction PostProvider({children}) {\r\n    const [posts, setPosts] = useState(() =>\r\n    Array.from({ length: 30 }, () => createRandomPost())\r\n  );\r\n  const [searchQuery, setSearchQuery] = useState(\"\");\r\n\r\n  // Derived state. These are the posts that will actually be displayed\r\n  const searchedPosts =\r\n    searchQuery.length > 0\r\n      ? posts.filter((post) =>\r\n          `${post.title} ${post.body}`\r\n            .toLowerCase()\r\n            .includes(searchQuery.toLowerCase())\r\n        )\r\n      : posts;\r\n\r\n  function handleAddPost(post) {\r\n    setPosts((posts) => [post, ...posts]);\r\n  }\r\n\r\n  function handleClearPosts() {\r\n    setPosts([]);\r\n  }\r\n\r\n  return(\r\n    <PostContext.Provider value={{\r\n      posts : searchedPosts,\r\n      onClearPosts :handleClearPosts,\r\n      searchQuery :searchQuery,\r\n      setSearchQuery,\r\n      onAddPost: handleAddPost,\r\n\r\n    }}>\r\n      {children}\r\n    </PostContext.Provider>\r\n  )\r\n\r\n\r\n}\r\n\r\nfunction usePost() {\r\n  const context = useContext(PostContext)\r\n  return context\r\n}\r\n\r\nexport {PostProvider, usePost}\r\n"],"mappings":";;;;AACA,SAASA,aAAT,EAAwBC,UAAxB,EAAoCC,QAApC,QAAoD,OAApD;AACA,SAASC,KAAT,QAAsB,iBAAtB;;;AAGA,SAASC,gBAAT,GAA4B;EAC1B,OAAO;IACLC,KAAK,EAAG,GAAEF,KAAK,CAACG,MAAN,CAAaC,SAAb,EAAyB,IAAGJ,KAAK,CAACG,MAAN,CAAaE,IAAb,EAAoB,EADrD;IAELC,IAAI,EAAEN,KAAK,CAACG,MAAN,CAAaI,MAAb;EAFD,CAAP;AAID;;AACD,MAAMC,WAAW,gBAAGX,aAAa,EAAjC;;AAEA,SAASY,YAAT,OAAkC;EAAA;;EAAA,IAAZ;IAACC;EAAD,CAAY;EAC9B,MAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBb,QAAQ,CAAC,MACnCc,KAAK,CAACC,IAAN,CAAW;IAAEC,MAAM,EAAE;EAAV,CAAX,EAA2B,MAAMd,gBAAgB,EAAjD,CADkC,CAAlC;EAGF,MAAM,CAACe,WAAD,EAAcC,cAAd,IAAgClB,QAAQ,CAAC,EAAD,CAA9C,CAJgC,CAMhC;;EACA,MAAMmB,aAAa,GACjBF,WAAW,CAACD,MAAZ,GAAqB,CAArB,GACIJ,KAAK,CAACQ,MAAN,CAAcC,IAAD,IACV,GAAEA,IAAI,CAAClB,KAAM,IAAGkB,IAAI,CAACd,IAAK,EAA3B,CACGe,WADH,GAEGC,QAFH,CAEYN,WAAW,CAACK,WAAZ,EAFZ,CADF,CADJ,GAMIV,KAPN;;EASA,SAASY,aAAT,CAAuBH,IAAvB,EAA6B;IAC3BR,QAAQ,CAAED,KAAD,IAAW,CAACS,IAAD,EAAO,GAAGT,KAAV,CAAZ,CAAR;EACD;;EAED,SAASa,gBAAT,GAA4B;IAC1BZ,QAAQ,CAAC,EAAD,CAAR;EACD;;EAED,oBACE,QAAC,WAAD,CAAa,QAAb;IAAsB,KAAK,EAAE;MAC3BD,KAAK,EAAGO,aADmB;MAE3BO,YAAY,EAAED,gBAFa;MAG3BR,WAAW,EAAEA,WAHc;MAI3BC,cAJ2B;MAK3BS,SAAS,EAAEH;IALgB,CAA7B;IAAA,UAQGb;EARH;IAAA;IAAA;IAAA;EAAA,QADF;AAcD;;GAtCQD,Y;;KAAAA,Y;;AAwCT,SAASkB,OAAT,GAAmB;EAAA;;EACjB,MAAMC,OAAO,GAAG9B,UAAU,CAACU,WAAD,CAA1B;EACA,OAAOoB,OAAP;AACD;;IAHQD,O;;AAKT,SAAQlB,YAAR,EAAsBkB,OAAtB"},"metadata":{},"sourceType":"module"}